{%- if production.event.repository %}
{%- assign repo_dir = production.event.repository.directory %}
{%- else %}
{%- assign repo_dir = "." %}
{%- endif %}
{%- assign meta = production.meta %}
{%- assign sampler = production.meta['sampler'] %}
{%- assign scheduler = production.meta['scheduler'] %}
{%- assign likelihood = production.meta['likelihood'] %}
{%- assign waveform = production.meta['waveform'] %}
{%- assign data = production.meta['data'] %}
{%- assign priors = production.meta['priors'] -%}
{%- assign quality = production.meta['quality'] %}
{%- assign ifos = production.meta['interferometers'] %}

##
## rift.ini : prototype embedded in rift source tree, configured via asimov
##

[analysis]
ifos={{ production.meta['interferometers'] }}
engine={{ production.meta['engine'] }}
nparallel=4
upload-to-gracedb=False
singularity={{ scheduler['osg'] | default: False }}
osg={{ scheduler['osg'] | default: False }}


[paths]
webdir={{ config['general']['webroot'] }}/{{ production.event.name }}/{{ production.name }}


[input]
max-psd-length=10000
padding=16
minimum_realizations_number=8
events=all
analyse-all-time=False
timeslides=False
ignore-gracedb-psd=True
threshold-snr=3
gps-time-file =
ignore-state-vector = True

[condor]
lalsuite-install={{ config["pipelines"]["environment"] }}
ligolw_print=%(lalsuite-install)s/bin/ligolw_print
coherencetest=%(lalsuite-install)s/bin/lalinference_coherence_test
ligo-skymap-from-samples=%(lalsuite-install)s/bin/ligo-skymap-from-samples
ligo-skymap-plot=%(lalsuite-install)s/bin/ligo-skymap-plot
processareas=%(lalsuite-install)s/bin/process_areas
computeroqweights=%(lalsuite-install)s/bin/lalinference_compute_roq_weights
mpiwrapper=%(lalsuite-install)s/bin/lalinference_mpi_wrapper
gracedb=%(lalsuite-install)s/bin/gracedb
ppanalysis=%(lalsuite-install)s/bin/cbcBayesPPAnalysis
pos_to_sim_inspiral=%(lalsuite-install)s/bin/cbcBayesPosToSimInspiral

mpirun = %(lalsuite-install)s/bin/mpirun

accounting_group={{ scheduler['accounting group'] }}
accounting_group_user={{ config['condor']['user'] }}

[datafind]
url-type=file
types = { {% for ifo in ifos %}"{{ifo}}":"{{data['frame types'][ifo]}}",{% endfor %} }

[data]
channels = { {% for ifo in ifos %}"{{ifo}}":"{{data['channels'][ifo]}}",{% endfor %} }

[lalinference]
flow = { {% for ifo in ifos %}"{{ifo}}":{{quality['minimum frequency'][ifo]}},{% endfor %} }
fhigh = { {% for ifo in ifos %}"{{ifo}}":{{quality['maximum frequency'][ifo]}},{% endfor %} }

[engine]

{% if waveform contains 'reference frequency' %}
fref={{ waveform['reference frequency'] }}
{% else %}
# WARNING: 'reference frequency' not provided in asimov ledger!
fref={{ likelihood['start frequency'] }}
{% endif %}

fmin-template={{ likelihood['start frequency'] }}

# note *no* quote here
approx = {{ waveform['approximant'] }}
amporder = {{ production.meta['waveform']['pn amplitude order'] }}

seglen = {{ data['segment length'] }}
srate =  {{ likelihood['sample rate'] }}

{%- if data contains "calibration" %}
{%- if data['calibration'] contains ifos[0] %}
enable-spline-calibration =
spcal-nodes = 10
{% for ifo in ifos %}
{{ifo}}-spcal-envelope="{{data['calibration'][ifo]}}"
{%- endfor %}
{%- endif %}
{%- endif %}

{%- for ifo in ifos %}
{{ifo}}-psd="{{ production.xml_psds[ifo] }}"
{%- endfor %}

#
# Priors
#

# Spin
a_spin1-max = {{ production.meta['priors']['spin 1']['maximum'] }}
a_spin2-max = {{ production.meta['priors']['spin 2']['maximum'] }}

{%- if production.meta['priors'] contains "chirp mass" %}
# Chirp mass
chirpmass-min = {{ production.meta['priors']['chirp mass']['minimum'] }}
chirpmass-max = {{ production.meta['priors']['chirp mass']['maximum'] }}
{%- endif %}
# Mass ratio
q-min = {{ production.meta['priors']['mass ratio']['minimum'] }}
q-max = {{ production.meta['priors']['mass ratio']['maximum'] }}

# Component masses
comp-min = {{ production.meta['priors']['mass 1']['minimum'] }}
comp-max = {{ production.meta['priors']['mass 1']['maximum'] }}

# Luminosity distance
distance-max = {{ production.meta['priors']['luminosity distance']['maximum'] }}
{%- if  production.meta['priors'] contains "volume" %}
{%- if production.meta['priors']['volume'] == "comoving" %}
distance-prior-comoving-volume = 
{%- endif %}
{%- endif %}                                                                                                              

{%- if likelihood['assume'] contains 'eccentric' %}
ecc_min={{ sampler['extra eccentric arguments']['force-ecc-min'] }}
ecc_max={{ sampler['extra eccentric arguments']['force-ecc-max'] }}
{%- endif %}

{%- if sampler['extra eccentric arguments'] contains 'use-meanPerAno' %}
meanPerAno_min={{ sampler['extra eccentric arguments']['force-meanPerAno-min'] }}
meanPerAno_max={{ sampler['extra eccentric arguments']['force-meanPerAno-max'] }}
{%- endif %}

[skyarea]
maxpts=2000

[resultspage]
skyres=0.5
deltaLogP = 7.5

[ligo-skymap-from-samples]
enable-multiresolution=

[ligo-skymap-plot]
annotate=
contour= 50 90

[rift-pseudo-pipe]
# Pipeline settings
internal-n-iterations-subdag-max=50

{% if sampler contains 'likelihood' %}
{% if sampler['likelihood'] contains 'calibration' %}
{% if sampler['likelihood']['calibration'] %}
calibration-reweighting={{sampler['likelihood']['calibration']['sample']}}
# {{ meta.name }} 
{% if sampler['likelihood']['calibration'] contains 'bilby ini file' %}
bilby-ini-file="{{sampler['likelihood']['calibration']['bilby ini file'] }}"
{% else %}
bilby-ini-file="{{repo_dir}}/{{production.category}}"
{% endif %}
calibration-reweighting-batchsize=200
{% endif %}
{% endif %}
{% endif %}

#
# CIP Settings
#
cip-fit-method="rf"
cip-sampler-method='{{ sampler['cip']['sampling method'] | default: "default" }}'
cip-explode-jobs= {{ sampler['cip']['explode jobs' ] | default: 3 }}
cip-explode-jobs-auto={{ sampler['cip']['explode jobs auto' ] | default: True }}
#
# Internal settings
#
{% if sampler contains "force iterations" %}
internal-force-iterations={{ sampler['force iterations'] }}
{% endif %}
internal-use-aligned-phase-coordinates=True  
{% if sampler contains 'correlate parameters default' %}
internal-correlate-default=True
{% endif %}
internal-use-rescaled-transverse-spin-coordinates={{ sampler['use rescaled transverse spin coordinates' ] | default: True }}   
internal-cip-use-lnL=True
{% if sampler contains 'ile' %} {% if sampler['ile'] contains 'rotate phase' %}
internal-ile-rotate-phase={{ sampler['ile']['rotate phase'] }}
{% endif %} {% endif %}

#
# Assume settings
#
{% assign assume_size = likelihood['assume'].size %}
{%- if assume_size > 0 %}
assume-nospin={% if likelihood['assume'] contains "no spin" %}True{% else %}False{% endif %}
assume-precessing={% if likelihood['assume'] contains "precessing" %}True{% else %}False{% endif %}
assume-nonprecessing={% if likelihood['assume'] contains "nonprecessing" %}True{% else %}False{% endif %}
assume-matter={% if likelihood['assume'] contains "matter" %}True{% else %}False{% endif %}
assume-matter-but-primary-bh={% if likelihood['assume'] contains "matter secondary" %}True{% else %}False{% endif %}
assume-eccentric={% if likelihood['assume'] contains "eccentric" %}True{% else %}False{% endif %}
assume-lowlatency-tradeoffs={% if likelihood['assume'] contains "lowlatency tradeoffs" %}True{% else %}False{% endif %}
assume-highq={% if likelihood['assume'] contains "high q" %}True{% else %}False{% endif %}
assume-well-placed={% if likelihood['assume'] contains "well-placed" %}True{% else %}False{% endif %}
{% if likelihood['assume'] contains 'eccentric' %}
  {%- if sampler contains 'extra eccentric arguments' -%}
    {%- for arg in sampler['extra eccentric arguments'] %}
{{ arg }}={{ sampler['extra eccentric arguments'][arg] }} 
    {% endfor %}
  {%- endif -%}
{%- endif %}

{%- endif %}

#
# Marginalisations
#
internal-marginalize-distance={{ likelihood['marginalization']['distance'] | default: "False" }}

{%- if likelihood['marginalization'] contains "distance lookup" %}
internal-marginalize-distance-file={{ likelihood['marginalization']['distance lookup'] | default: lookup_default }}
{%- endif %}

internal-distance-max={{ production.meta['priors']['luminosity distance']['maximum'] }}
#internal-distance-max={{ likelihood['marginalization']['maximum distance'] | default: 10000 }}
#
# ILE Settings
#
ile-n-eff= {{ sampler['ile']['n eff'] | default: 10 }}
ile-sampler-method='{{ sampler['ile']['sampling method'] | default: "adaptive_cartesian_gpu" }}'
internal-ile-freezeadapt={{ sampler['ile']['freezeadapt'] | default: False }}
# {%- if sampler['ile'] contains "manual extra args" %}
#  manual-extra-ile-args="{% for arg in sampler['ile']['manual extra args'] %} {{ arg }} {% endfor %}"
 # {%- endif %}
# Add extra arguments.  Note we provide EITHER OR choices
{%- if waveform.keys() contains 'arguments' %}
#     - using waveform arguments. Maybe we can just dump the dictionary directly?
#   manual-extra-ile-args=--internal-waveform-extra-lalsuite-args  {{waveform['arguments']}}
 {% if sampler['ile'] contains 'manual extra args' %}
 #  "{ {% for arg in waveform['arguments'] %}'{{arg}}': {{waveform['arguments'][arg]}}, {% endfor %} }"
manual-extra-ile-args=--internal-waveform-extra-lalsuite-args "{{waveform['arguments']}}" {% for arg in sampler['ile']['manual extra args'] %} {{ arg }} {% endfor %}
 {% else %}
manual-extra-ile-args=--internal-waveform-extra-lalsuite-args "{{waveform['arguments']}}"
 {% endif %}
{%- elsif  sampler['ile'] contains 'manual extra args' %}
#    - using manually specified arguments from the file
manual-extra-ile-args="{{waveform['arguments']}}"
# "{% for arg in sampler['ile']['manual extra args'] %} {{ arg }} {% endfor %}"
{%- endif %}
#{%- if sampler['ile'] contains "adapt all" %}
#manual-extra-ile-args=' --force-adapt-all '
#{%- endif %}
{%- if likelihood contains "roll off time" %}
internal-ile-data-tukey-window-time={{likelihood['roll off time']}}
{%- endif %}



{%- if sampler contains "manual grid" %}
#
# Manual grid settings
#
manual-initial-grid='{{ sampler["manual grid"] }}'
{%- endif %}
#
# Waveform arguments
# 
#   approx is repeated, because argument parsing changes what is done by default based on *arguments*
#    Note it is quoted this time, because we use an 'eval' on every argument in this subsection
approx = "{{ waveform['approximant'] }}"
l-max={{ waveform['maximum mode'] | default: 4 }}

#
# Priors
#
# * distance prior if this argument is *not* set is dL^2
{%- if priors.keys() contains "luminosity distance" %}
{%- assign p = priors['luminosity distance'] %}
{% if p['type'] contains 'PowerLaw' %}
# Default distance prior no text here, assume alpha=2
{% elsif p['type'] contains 'UniformSourceFrame' %}
ile-distance-prior='cosmo_sourceframe'
{% elsif p['type'] contains 'UniformComovingVolume' %}
ile-distance-prior='cosmo'
{% else %}
ile-distance-prior="pseudo_cosmo"
{% endif %}
{% endif %}

# maximum runtime for ILE jobs. May need to be longer
ile-runtime-max-minutes= {{ sampler['ile']['runtime max minues'] | default: 700 }}
# Number of likelihood evaluations for each instance. Make this larger if your likelihoods are very fast, smaller if you need low latency
ile-jobs-per-worker= {{ sampler['ile']['jobs per worker'] | default: 20 }}


#
# OSG settings
#
use_osg= {{ scheduler['osg'] | default: False }}
use_osg_file_transfer= {{ scheduler['osg'] | default: False }} 
use_osg_cip= {{ scheduler['osg'] | default: False }}  
internal-truncate-files-for-osg-file-transfer= {{ scheduler['osg'] | default: False }}



internal-propose-converge-last-stage=True
add-extrinsic=True
batch-extrinsic=True
# * final stage provides time (and distance, if marginalized)
add-extrinsic-time-resampling=True

# Other options needed for this specific analysis
#  force-eta-range : the usual doesn't awlays work; this uses 20:1 prior range, should be set consistently to above
# force-eta-range="[0.0453514739,0.24999999999]"

force-chi-max = {{ production.meta['priors']['spin 1']['maximum'] }}
force-chi-small-max = {{ production.meta['priors']['spin 2']['maximum'] }}
force-mc-range ="{{[ production.meta['priors']['chirp mass']['minimum'], production.meta['priors']['chirp mass']['maximum']] }}"
event_time = {{ production.meta['event time'] }} 
fmin-template={{ likelihood['start frequency'] }}
# fmax: see bilby setup .  Note we only have ONE such
fmax = {{ quality['maximum frequency'][ifos[0]] }}
# force-hint-snr : if the asimov prototype has snr information, provide it here - NOT FOUND
n-output-samples=  {% if sampler contains "n output samples" %} {{ sampler['n output samples'] }} {% else %}15000 {% endif %}

# File transfer settings (needed for some waveform)
#   Same syntax as in bilby, to minimize user stress
{%- if scheduler contains "additional files" %}
ile-additional-files-to-transfer= "{% for file in scheduler['additional files'] %} {{ file }},{% endfor %}"
{%- endif %}

# additional ILE disk space, as needed for (a) additional files to transfer (waveforms), or (b) large frame files
# quote the request-disk, so I can safely use '1G' in the file
{% if sampler['ile'] contains 'request disk' %}
internal-ile-request-disk= "{{ sampler['ile']['request disk'] }}"
{% endif %}
